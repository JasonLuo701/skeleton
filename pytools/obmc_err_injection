#!/usr/bin/python

import sys
import dbus
from obmc.sensors import SensorThresholds as SensorThresholds
from obmc.sensors import SensorValue as SensorValue
from obmc.sensors import HwmonSensor as HwmonSensor
import obmc_system_config as System


SENSOR_BUS = 'org.openbmc.Sensors'
SENSORS_OBJPATH = '/org/openbmc'
SENSOR_PATH = '/org/openbmc/sensors'
threshold_types = ['critical_lower', 'critical_upper', \
                    'warning_lower', 'warning_upper']

def get_objpath(sensor_number):
    found = False
    objpath = None
    for objpath, sensors in System.HWMON_SENSOR_CONFIG.iteritems():
        for sensor in sensors:
            if 'sensornumber' in sensor:
                if sensor_number == sensor['sensornumber']:
                    return objpath

    for nodes in System.HWMON_CONFIG.values():
        if 'names' in nodes:
            for node in nodes['names'].values():
                if 'sensornumber' in node:
                    if sensor_number == node['sensornumber']:
                        objpath = SENSORS_OBJPATH +'/'+ node['object_path']
                        found = True
                        break
                else:
                    continue
    if found:
        return objpath
    for node in System.SENSOR_MONITOR_CONFIG:
        if 'sensornumber' in node[1]:
            if node[1]['sensornumber'] == sensor_number:
                objpath = node[0]
                found = True
                break
        else:
            continue

    return objpath


def set_threshold(sensor_number, threshold_type, threshold_value):
    try:
        bus = dbus.SystemBus()
        obj_path = get_objpath(sensor_number)
        if not obj_path:
            print "obj_path not found"
            exit(1)
        obj = bus.get_object(SENSOR_BUS, obj_path,introspect=False)
        intf = dbus.Interface(obj,dbus.PROPERTIES_IFACE)
        intf.Set(SensorThresholds.IFACE_NAME, threshold_type+'_'+str(sensor_number), threshold_value)
    except:
        print 'Set threshold failed'
    print "Set sensor {0} {1} to {2}".format(sensor_number, threshold_type, \
                                                threshold_value)

if __name__ == '__main__':
    if len(sys.argv) != 4 or sys.argv[1] == "-h":
        print "Usage:"
        print "\tobmc_err_injection" \
                "[sensor_number] [threshold_type] [threshold_value]\n"
        print "\tsensor_number: decimal or hex"
        print "\tthreshold_type: critical_lower, critical_upper," \
                "warning_lower or warning_upper"
        print "\tthreshold_value: new threshold value to be set"
        exit(0)

    sys.argv.pop(0)
    try:
        sensor_number = int(sys.argv.pop(0), 0)
    except:
        print "Invalid sensor number"
        exit(1)
    threshold_type = sys.argv.pop(0)
    if not threshold_type in threshold_types:
        print "Incorrect threshold type"
        exit(1)
    try:
        threshold_value = int(sys.argv.pop(0))
    except:
        print "Invalid threshold value"

    set_threshold(sensor_number, threshold_type, threshold_value)
